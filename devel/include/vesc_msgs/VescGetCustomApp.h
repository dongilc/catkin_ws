// Generated by gencpp from file vesc_msgs/VescGetCustomApp.msg
// DO NOT EDIT!


#ifndef VESC_MSGS_MESSAGE_VESCGETCUSTOMAPP_H
#define VESC_MSGS_MESSAGE_VESCGETCUSTOMAPP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vesc_msgs
{
template <class ContainerAllocator>
struct VescGetCustomApp_
{
  typedef VescGetCustomApp_<ContainerAllocator> Type;

  VescGetCustomApp_()
    : header()
    , send_mode_index1(0)
    , fw_ver_major(0)
    , fw_ver_minor(0)
    , fault_code(0)
    , app_status_code(0)
    , send_mode_index2(0)
    , can_devs_num(0)
    , can_id()
    , custom_status()
    , enc_rps()
    , enc_rad()
    , current()
    , duty()  {
    }
  VescGetCustomApp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , send_mode_index1(0)
    , fw_ver_major(0)
    , fw_ver_minor(0)
    , fault_code(0)
    , app_status_code(0)
    , send_mode_index2(0)
    , can_devs_num(0)
    , can_id(_alloc)
    , custom_status(_alloc)
    , enc_rps(_alloc)
    , enc_rad(_alloc)
    , current(_alloc)
    , duty(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _send_mode_index1_type;
  _send_mode_index1_type send_mode_index1;

   typedef int32_t _fw_ver_major_type;
  _fw_ver_major_type fw_ver_major;

   typedef int32_t _fw_ver_minor_type;
  _fw_ver_minor_type fw_ver_minor;

   typedef int32_t _fault_code_type;
  _fault_code_type fault_code;

   typedef int32_t _app_status_code_type;
  _app_status_code_type app_status_code;

   typedef int32_t _send_mode_index2_type;
  _send_mode_index2_type send_mode_index2;

   typedef int32_t _can_devs_num_type;
  _can_devs_num_type can_devs_num;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _can_id_type;
  _can_id_type can_id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _custom_status_type;
  _custom_status_type custom_status;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _enc_rps_type;
  _enc_rps_type enc_rps;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _enc_rad_type;
  _enc_rad_type enc_rad;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_type;
  _current_type current;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _duty_type;
  _duty_type duty;





  typedef boost::shared_ptr< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> const> ConstPtr;

}; // struct VescGetCustomApp_

typedef ::vesc_msgs::VescGetCustomApp_<std::allocator<void> > VescGetCustomApp;

typedef boost::shared_ptr< ::vesc_msgs::VescGetCustomApp > VescGetCustomAppPtr;
typedef boost::shared_ptr< ::vesc_msgs::VescGetCustomApp const> VescGetCustomAppConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vesc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vesc_msgs': ['/home/nvidia/workspace/catkin_ws/src/vesc/vesc_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daa4967cc5ef43655bd186c327b3176d";
  }

  static const char* value(const ::vesc_msgs::VescGetCustomApp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdaa4967cc5ef4365ULL;
  static const uint64_t static_value2 = 0x5bd186c327b3176dULL;
};

template<class ContainerAllocator>
struct DataType< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vesc_msgs/VescGetCustomApp";
  }

  static const char* value(const ::vesc_msgs::VescGetCustomApp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# VESCuino CDI CUSTOM_APP RX Messages\n\
\n\
Header  header\n\
\n\
# FW Version Data\n\
int32 send_mode_index1\n\
int32 fw_ver_major\n\
int32 fw_ver_minor\n\
\n\
# Original Get Value Data\n\
#float64 voltage_input        # input voltage (volt)\n\
#float64 temperature_pcb      # temperature of printed circuit board (degrees Celsius)\n\
#float64 current_motor        # motor current (ampere)\n\
#float64 current_input        # input current (ampere)\n\
#float64 speed                # motor electrical speed (revolutions per minute) \n\
#float64 duty_cycle           # duty cycle (0 to 1)\n\
#float64 charge_drawn         # electric charge drawn from input (ampere-hour)\n\
#float64 charge_regen         # electric charge regenerated to input (ampere-hour)\n\
#float64 energy_drawn         # energy drawn from input (watt-hour)\n\
#float64 energy_regen         # energy regenerated to input (watt-hour)\n\
#float64 displacement         # net tachometer (counts)\n\
#float64 distance_traveled    # total tachnometer (counts)\n\
int32   fault_code\n\
#float64 pid_pos_now    		 # pid position now (deg) 0~360\n\
\n\
int32 app_status_code        # application status code\n\
\n\
# CAN Status Data \n\
int32 send_mode_index2\n\
int32 can_devs_num\n\
int32[] can_id\n\
int32[] custom_status\n\
\n\
# Raw Encoder Data\n\
float64[] enc_rps		     # Encoder Read Raw Data (No Delay, rad/sec) \n\
float64[] enc_rad			 # Encoder Read Raw Data (No Delay, rad)\n\
float64[] current			 # can status - current\n\
float64[] duty			     # can status - duty\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::vesc_msgs::VescGetCustomApp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.send_mode_index1);
      stream.next(m.fw_ver_major);
      stream.next(m.fw_ver_minor);
      stream.next(m.fault_code);
      stream.next(m.app_status_code);
      stream.next(m.send_mode_index2);
      stream.next(m.can_devs_num);
      stream.next(m.can_id);
      stream.next(m.custom_status);
      stream.next(m.enc_rps);
      stream.next(m.enc_rad);
      stream.next(m.current);
      stream.next(m.duty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VescGetCustomApp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vesc_msgs::VescGetCustomApp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vesc_msgs::VescGetCustomApp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "send_mode_index1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.send_mode_index1);
    s << indent << "fw_ver_major: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fw_ver_major);
    s << indent << "fw_ver_minor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fw_ver_minor);
    s << indent << "fault_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fault_code);
    s << indent << "app_status_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.app_status_code);
    s << indent << "send_mode_index2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.send_mode_index2);
    s << indent << "can_devs_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.can_devs_num);
    s << indent << "can_id[]" << std::endl;
    for (size_t i = 0; i < v.can_id.size(); ++i)
    {
      s << indent << "  can_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.can_id[i]);
    }
    s << indent << "custom_status[]" << std::endl;
    for (size_t i = 0; i < v.custom_status.size(); ++i)
    {
      s << indent << "  custom_status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.custom_status[i]);
    }
    s << indent << "enc_rps[]" << std::endl;
    for (size_t i = 0; i < v.enc_rps.size(); ++i)
    {
      s << indent << "  enc_rps[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.enc_rps[i]);
    }
    s << indent << "enc_rad[]" << std::endl;
    for (size_t i = 0; i < v.enc_rad.size(); ++i)
    {
      s << indent << "  enc_rad[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.enc_rad[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "duty[]" << std::endl;
    for (size_t i = 0; i < v.duty.size(); ++i)
    {
      s << indent << "  duty[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.duty[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VESC_MSGS_MESSAGE_VESCGETCUSTOMAPP_H
