// Generated by gencpp from file amg_p1/MP_Message.msg
// DO NOT EDIT!


#ifndef AMG_P1_MESSAGE_MP_MESSAGE_H
#define AMG_P1_MESSAGE_MP_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amg_p1
{
template <class ContainerAllocator>
struct MP_Message_
{
  typedef MP_Message_<ContainerAllocator> Type;

  MP_Message_()
    : stamp()
    , x()
    , th()
    , x_input()
    , vel_out(0.0)
    , theta_out(0.0)  {
    }
  MP_Message_(const ContainerAllocator& _alloc)
    : stamp()
    , x(_alloc)
    , th(_alloc)
    , x_input(_alloc)
    , vel_out(0.0)
    , theta_out(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _th_type;
  _th_type th;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_input_type;
  _x_input_type x_input;

   typedef double _vel_out_type;
  _vel_out_type vel_out;

   typedef double _theta_out_type;
  _theta_out_type theta_out;





  typedef boost::shared_ptr< ::amg_p1::MP_Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amg_p1::MP_Message_<ContainerAllocator> const> ConstPtr;

}; // struct MP_Message_

typedef ::amg_p1::MP_Message_<std::allocator<void> > MP_Message;

typedef boost::shared_ptr< ::amg_p1::MP_Message > MP_MessagePtr;
typedef boost::shared_ptr< ::amg_p1::MP_Message const> MP_MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amg_p1::MP_Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amg_p1::MP_Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace amg_p1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'amg_p1': ['/home/cdi/SynologyDrive/workspace/catkin_ws/src/amg_p1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::amg_p1::MP_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amg_p1::MP_Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amg_p1::MP_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amg_p1::MP_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amg_p1::MP_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amg_p1::MP_Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amg_p1::MP_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79bb341ec382fab4793fae5691c7faf8";
  }

  static const char* value(const ::amg_p1::MP_Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79bb341ec382fab4ULL;
  static const uint64_t static_value2 = 0x793fae5691c7faf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::amg_p1::MP_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amg_p1/MP_Message";
  }

  static const char* value(const ::amg_p1::MP_Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amg_p1::MP_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64[] x\n"
"float64[] th\n"
"float64[] x_input\n"
"\n"
"float64 vel_out\n"
"float64 theta_out\n"
;
  }

  static const char* value(const ::amg_p1::MP_Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amg_p1::MP_Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.x);
      stream.next(m.th);
      stream.next(m.x_input);
      stream.next(m.vel_out);
      stream.next(m.theta_out);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MP_Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amg_p1::MP_Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amg_p1::MP_Message_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "th[]" << std::endl;
    for (size_t i = 0; i < v.th.size(); ++i)
    {
      s << indent << "  th[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.th[i]);
    }
    s << indent << "x_input[]" << std::endl;
    for (size_t i = 0; i < v.x_input.size(); ++i)
    {
      s << indent << "  x_input[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_input[i]);
    }
    s << indent << "vel_out: ";
    Printer<double>::stream(s, indent + "  ", v.vel_out);
    s << indent << "theta_out: ";
    Printer<double>::stream(s, indent + "  ", v.theta_out);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMG_P1_MESSAGE_MP_MESSAGE_H
