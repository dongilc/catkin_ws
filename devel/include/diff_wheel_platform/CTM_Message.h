// Generated by gencpp from file diff_wheel_platform/CTM_Message.msg
// DO NOT EDIT!


#ifndef DIFF_WHEEL_PLATFORM_MESSAGE_CTM_MESSAGE_H
#define DIFF_WHEEL_PLATFORM_MESSAGE_CTM_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diff_wheel_platform
{
template <class ContainerAllocator>
struct CTM_Message_
{
  typedef CTM_Message_<ContainerAllocator> Type;

  CTM_Message_()
    : stamp()
    , target_vel()
    , current_vel()
    , target_pos()
    , current_pos()  {
    }
  CTM_Message_(const ContainerAllocator& _alloc)
    : stamp()
    , target_vel(_alloc)
    , current_vel(_alloc)
    , target_pos(_alloc)
    , current_pos(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_vel_type;
  _target_vel_type target_vel;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_vel_type;
  _current_vel_type current_vel;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_pos_type;
  _target_pos_type target_pos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_pos_type;
  _current_pos_type current_pos;





  typedef boost::shared_ptr< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> const> ConstPtr;

}; // struct CTM_Message_

typedef ::diff_wheel_platform::CTM_Message_<std::allocator<void> > CTM_Message;

typedef boost::shared_ptr< ::diff_wheel_platform::CTM_Message > CTM_MessagePtr;
typedef boost::shared_ptr< ::diff_wheel_platform::CTM_Message const> CTM_MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diff_wheel_platform::CTM_Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace diff_wheel_platform

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'diff_wheel_platform': ['/home/cdi/SynologyDrive/workspace/catkin_ws/src/differential_wheel_platform/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed2ad4965391603c3242af0f3ef56859";
  }

  static const char* value(const ::diff_wheel_platform::CTM_Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed2ad4965391603cULL;
  static const uint64_t static_value2 = 0x3242af0f3ef56859ULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diff_wheel_platform/CTM_Message";
  }

  static const char* value(const ::diff_wheel_platform::CTM_Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64[] target_vel\n"
"float64[] current_vel\n"
"float64[] target_pos\n"
"float64[] current_pos\n"
;
  }

  static const char* value(const ::diff_wheel_platform::CTM_Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.target_vel);
      stream.next(m.current_vel);
      stream.next(m.target_pos);
      stream.next(m.current_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CTM_Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_wheel_platform::CTM_Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diff_wheel_platform::CTM_Message_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "target_vel[]" << std::endl;
    for (size_t i = 0; i < v.target_vel.size(); ++i)
    {
      s << indent << "  target_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_vel[i]);
    }
    s << indent << "current_vel[]" << std::endl;
    for (size_t i = 0; i < v.current_vel.size(); ++i)
    {
      s << indent << "  current_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current_vel[i]);
    }
    s << indent << "target_pos[]" << std::endl;
    for (size_t i = 0; i < v.target_pos.size(); ++i)
    {
      s << indent << "  target_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_pos[i]);
    }
    s << indent << "current_pos[]" << std::endl;
    for (size_t i = 0; i < v.current_pos.size(); ++i)
    {
      s << indent << "  current_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFF_WHEEL_PLATFORM_MESSAGE_CTM_MESSAGE_H
